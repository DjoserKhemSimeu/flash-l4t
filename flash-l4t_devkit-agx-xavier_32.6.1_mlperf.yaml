#==============================================================================
#
# DESCRIPTION: Base recipe to build a docker image to flash L4T
# COPYRIGHT: CNRS 2023-2025, Univ Grenoble-Alpes 2025
# LICENSE: GPLv2+
# AUTHOR: Pierre Neyron <pierre.neyron@imag.fr>
#         Djoser SIMEU <djoser.simeu@gmail.com>
#
#==============================================================================
---
extend: grid5000/steps/backend/$${backend}.yaml

# Loads some helpful aliases (this files are located in steps/aliases/ directory)
aliases: defaults.yaml

# Custom shell environement (this files are located in steps/env/ directory)
env:
  - bashrc
  - functions.sh

# Global variables use by Kameleon engine and the steps
global:
  arch: aarch64
  backend: docker
  docker_cleanup_section: export
  out_context_docker_image: "ubuntu:18.04"

  l4t_version_major: "32"
  l4t_version_minor: "6"
  l4t_version_patch: "1"
  l4t_version: r$${l4t_version_major}.$${l4t_version_minor}.$${l4t_version_patch}
  nvidia_BSP_url: "https://developer.download.nvidia.com/embedded/L4T/r$${l4t_version_major}_Release_v$${l4t_version_minor}.$${l4t_version_patch}/T186/Jetson_Linux_R$${l4t_version_major}.$${l4t_version_minor}.$${l4t_version_patch}_aarch64.tbz2"
  nvidia_sample_rootfs_url: "https://developer.nvidia.com/downloads/embedded/l4t/r$${l4t_version_major}_release_v$${l4t_version_minor}.$${l4t_version_patch}/t186/tegra_linux_sample-root-filesystem_r$${l4t_version_major}.$${l4t_version_minor}.$${l4t_version_patch}_aarch64.tbz2"
  l4t_dir: "/nvidia/Linux_for_Tegra"

  rootfs: "$${l4t_dir}/rootfs"
  target_docker_image: "$${kameleon_recipe_name}-$${l4t_version_major}.$${l4t_version_minor}.$${l4t_version_patch}"

bootstrap:
  - prepare_docker
  - start_docker
  - install_additional_necessary_packages_in_out_context:
    - update_package_list:
      - apt-get_out: update
    - install_packages:
      - apt-get_out: install lbzip2 wget qemu-user-static
setup:
  - install_L4T:
    - install_nvidia_BSP:
      - exec_out: |
          set -e
          mkdir -p $${l4t_dir}
          wget --progress=dot:giga -O- $${nvidia_BSP_url} | tar -jx --strip-components=1 -C $${l4t_dir}
    - install_nvidia_sample_rootfs:
      - exec_out: wget --progress=dot:giga -O- $${nvidia_sample_rootfs_url} | tar -jx -C $${l4t_dir}/rootfs
    - apply_binaries:
      - exec_out: |
          set -e
          cd $${l4t_dir}
          ./apply_binaries.sh
    - fix_apt_sources:
      - exec_out: sed -i -e 's/<SOC>/t194/' $${l4t_dir}/rootfs/etc/apt/sources.list.d/nvidia-l4t-apt-source.list
  - setup_system_fs_in_chroot
  - install_jetpack:
    - update_apt:
      - apt-get_in: update
    - fix_apt_vs_blueman:
      - apt-get_in: remove --purge blueman
    - apt_install_jetpack:
      - apt-get_in: install nvidia-jetpack
  - install_mlperf_inference:
    - install_requirements:
      - apt-get_in: install cmake python3.8-dev python3-setuptools python3-wheel
      - exec_in: wget -O /include/onnx/NvOnnxParser.h https://raw.githubusercontent.com/onnx/onnx-tensorrt/refs/tags/release/8.4-GA/NvOnnxParser.h
    - retrieve_scripts:
      - exec_in: wget https://github.com/DjoserKhemSimeu/inference_results_v1.1/raw/refs/heads/main/closed/NVIDIA/scripts/install_xavier_dependencies.sh
      - exec_in: wget https://github.com/DjoserKhemSimeu/inference_results_v1.1/raw/refs/heads/main/closed/NVIDIA/scripts/requirements_xavier.txt
      - exec_in: wget https://github.com/DjoserKhemSimeu/inference_results_v1.1/raw/refs/heads/main/closed/NVIDIA/scripts/test_install.sh
    - run_install_script:
      - exec_in: bash -e ./install_xavier_dependencies.sh
    - test_install_script:
      - exec_in: bash -e ./test_install.sh
  - setup_for_flashing:
    - install_required_debs:
      - apt-get_out: install binutils usbutils udev python3-yaml liblz4-tool cpio openssh-client libxml2-utils perl-modules-5.26 dosfstools xxd
    - prebuild_flash_image:
      - unsetup-system-fs-chroot_in
      - exec_out: |
          set -e
          # Force the creation of the loop devices
          # (if the loop module is yet to be loaded by the flash script, loop devices won't be created in the out container)
          for d in {0..7}; do
            [ -e /dev/loop$d ] || mknod /dev/loop$d b 7 $d
          done
          cd $${l4t_dir}
          ./flash.sh --no-flash jetson-agx-xavier-devkit mmcblk0p1
export:
  - export_docker_image_ready_to_flash:
    - commit_and_configure_to_flash:
      - exec_local: |
          set -e
          # Stop the current docker container so that we can configure the image
          docker stop $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null || docker kill $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null
          # Create the final version of the image, ready to flash
          docker commit -c 'ENV USER=root' -c 'WORKDIR $${l4t_dir}' -c 'ENTRYPOINT ["./flash.sh"]' $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) $${target_docker_image} > /dev/null
          # Delete the container
          docker rm $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null
          rm -f $KAMELEON_WORKDIR/MAIN_CONTAINER_ID
    - explain_how_to_flash:
      - exec_local: |
          echo 'You can now flash AGX Xavier modules using a command line such as:'
          echo
          echo '$ docker run -it --rm --privileged -v /dev/bus/usb:/dev/bus/usb/ -v /dev:/dev $${target_docker_image} -r jetson-agx-xavier-devkit mmcblk0p1'
          echo
